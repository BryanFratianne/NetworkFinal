from tkinter import *
from socket import *

def checkAllRanks(clientSocket):
    request = "CheckAllRanks\r \n"
    clientSocket.send(request.encode())

    response = clientSocket.recv(1024).decode("ascii")
    print("The current standings are: \n\n" + response + "\n")


def checkSpecificRank(clientSocket):

    root = Tk()  # creates frame
    label1 = Label(root, text="Enter team name")
    entry1 = Entry(root)

    label1.grid(row=0, sticky=N)  # places lable on the top of the frame
    entry1.grid(row=1, sticky=N)  # keeps entry below lable
    team = str(entry1)

    request = "CheckSpecificRank\t" + team + "\r \n"  # sends what they entered to server
    clientSocket.send(request.encode())
    response = clientSocket.recv(1024).decode("ascii")

    if response != "TeamNameNotFound":
        print("Info for your current team: \n\n" + response + "\n")
    else:
        print("Sorry, that team name was no  found. \n\n")
    root.mainloop()  # keeps frame open until user closes


def checkRank(clientSocket):
    root = Tk()

    raButton = Button(root, text="Check All Rank")  # creates an action button
    rsButton = Button(root, text="Check Specific  Rank")  # creates an action button

    raButton.pack()
    rsButton.pack()

    if raButton:
        checkAllRanks(clientSocket)

    if rsButton:
        checkSpecificRank(clientSocket)

    root.mainloop()


def checkFullSchedule(clientSocket):
    requset = "CheckFullSchedule\r\n"
    clientSocket.send(requset.encode())

    response = clientSocket.recv(1024).decode("ascii")
    print("The full Schedule is: \n\n" + response + "\n")


def checkSpecificSchedule(clientSocket):
    root = Tk()  # creates frame
    label1 = Label(root, text="Enter team name")
    entry1 = Entry(root)

    label1.grid(row=0, sticky=N)  # places lable on the top of the frame
    entry1.grid(row=1, sticky=N)  # keeps entry below lable

    team = entry1.get()

    request = "CheckSpecificRank\t" + team + "\r \n"
    clientSocket.send(request.encode())
    response = clientSocket.recv(1024).decode("ascii")

    if response != "TeamNameNotFound":
        print("Info for your current team: \n\n" + response + "\n")
    else:
        print("Sorry, that team name was no  found. \n\n")
    root.mainloop()


def checkSchedule(clientSocket):
    # set up action right now for text will change to a GUI
    action = input("CheckFullSchedule, CheckSpecificSchedule: ")

    if action == "CheckFullSchedule":
        checkFullSchedule(clientSocket)

    if action == "CheckSpecificSchedule":
        checkSpecificSchedule(clientSocket)


def adjustScore(clientSocket):

    gameNum = input("enter game number: ")
    request = "adjustScore\t" + gameNum + "\r\n"
    clientSocket.send(request.encode())
    response = clientSocket.recv(1024).decode("ascii")
    if response != "GameNotFound":
        gameScore = input("enter the games score")
        clientSocket.send(gameScore.encode())
    else:
        print("Sorry, that game doesnt exist")


def clientMain():

    # Define  a server port number and server address
    serverName = "127.0.0.1"  # Use the same computer for test
    serverPort = 8080
    service = True

    while service:

        root = Tk()
        # Create a client TCP socket to connect with the server
        clientSocket = socket(AF_INET, SOCK_STREAM)
        clientSocket.connect((serverName, serverPort))

        print("connection")

        rankButton = Button(root, text="Check Rank")  # creates an action button
        schedualButton = Button(root, text="Check Schedule")  # creates an action button
        scoreButton = Button(root, text="Adjust Score ",)  # creates an action button

        rankButton.pack()
        schedualButton.pack()
        scoreButton.pack()

        if rankButton:
            checkRank(clientSocket)

        if schedualButton:
            checkSchedule(clientSocket)

        if scoreButton:
            adjustScore(clientSocket)


        root.mainloop()

clientMain()
